<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.youyuan.vhr.mapper.HrMapper">

    <resultMap id="BaseResultMap" type="org.youyuan.vhr.bean.Hr">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="phone" property="phone" jdbcType="CHAR"/>
        <result column="telephone" property="telephone" jdbcType="VARCHAR"/>
        <result column="address" property="address" jdbcType="VARCHAR"/>
        <result column="enabled" property="enabled" jdbcType="BIT"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="userface" property="userface" jdbcType="VARCHAR"/>
        <result column="remark" property="remark" jdbcType="VARCHAR"/>
    </resultMap>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from hr
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="org.youyuan.vhr.bean.Hr">
    insert into hr (id, name, phone, 
      telephone, address, enabled, 
      username, password, userface, 
      remark)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{phone,jdbcType=CHAR}, 
      #{telephone,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, #{enabled,jdbcType=BIT}, 
      #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{userface,jdbcType=VARCHAR}, 
      #{remark,jdbcType=VARCHAR})
  </insert>
    <update id="updateByPrimaryKey" parameterType="org.youyuan.vhr.bean.Hr">
    update hr
    set name = #{name,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=CHAR},
      telephone = #{telephone,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      enabled = #{enabled,jdbcType=BIT},
      username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      userface = #{userface,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

    <!--根据Hr的username查询Hr-->
    <select id="loadHrByUsername" resultMap="BaseResultMap">
    select  *from hr
    where username = #{username}
  </select>

    <resultMap id="roleResult" type="org.youyuan.vhr.bean.Role">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="nameZh" jdbcType="VARCHAR" property="namezh"/>
    </resultMap>

    <!--  根据Hr的id获取hr所拥有的所有角色-->
    <select id="getHrRoleById" resultMap="roleResult">
   SELECT  r.* FROM role r,hr_role hrr
   WHERE r.id = hrr.rid AND hrr.hrid = #{id}
  </select>

    <resultMap id="HrWithRoles" type="org.youyuan.vhr.bean.Hr" extends="BaseResultMap">
        <collection property="roles" ofType="org.youyuan.vhr.bean.Role">
            <id column="rid" property="id"></id>
            <result column="rname" jdbcType="VARCHAR" property="name"/>
            <result column="rnameZh" jdbcType="VARCHAR" property="namezh"/>
        </collection>
    </resultMap>

    <!--通过Hid获取Hr，左连接-->
    <select id="getHrByHid" resultMap="HrWithRoles">
        SELECT h.*,r.id AS rid ,r.`name`AS 'rname',r.nameZh AS 'rnameZh'
        FROM hr AS h
        LEFT JOIN hr_role AS hrr
        ON h.id=hrr.hrid
        LEFT JOIN role AS r
        ON hrr.rid= r.id
        WHERE h.id!=#{id}
        <if test="keywords!=null">
            and h.name like concat('%',#{keywords},'%')
        </if>
        order by h.id
    </select>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    select id, name, phone, telephone, address, enabled, username, password, userface,
    remark
    from hr
    where id = #{id,jdbcType=INTEGER}
  </select>

    <select id="selectAll" resultMap="BaseResultMap">
    select id, name, phone, telephone, address, enabled, username, password, userface, 
    remark
    from hr
  </select>

</mapper>